#pragma config(Sensor, in8,    gyro,           sensorGyro)
#pragma config(Motor,  port2,           FL,            tmotorVex393TurboSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           FR,            tmotorVex393TurboSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           BL,            tmotorVex393TurboSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           BR,            tmotorVex393TurboSpeed_MC29, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

// Field Centric
// =======================


// Controller 1/2, Stick L/R, Axis X/Y
#define C1LX vexRT[Ch4]
#define C1LY vexRT[Ch3]
#define C1RX vexRT[Ch1]

task main() {
	//Completely clear out any previous sensor readings by setting the port to "sensorNone"
 SensorType[in8] = sensorNone;
 wait1Msec(1000);
 //Reconfigure Analog Port 8 as a Gyro sensor and allow time for ROBOTC to calibrate it
 SensorType[in8] = sensorGyro;
 wait1Msec(2000);
 
//Adjust SensorScale to correct the scaling for your gyro
 //SensorScale[in8] = 260;
 //Adjust SensorFullCount to set the "rollover" point. 3600 sets the rollover point to +/-3600
 SensorFullCount[in8] = 3600;
while (true){
 int forward = vexRT[Ch3];
int right = vexRT[Ch4];

 int temp;
 float theta;
 
 
 theta= ((SensorValue[in8]/10)*3.141592654)/180;
 
 temp  = forward * cos(theta) - right * sin(theta);
        right = forward * sin(theta) + right * cos(theta);
        forward = temp;

		// Y component, X component, Rotation
		motor[FL] = -forward - right - C1RX;
		motor[FR] =  forward - right - C1RX;
		motor[BR] =  forward + right - C1RX;
		motor[BL] = -forward + right - C1RX;

		// Motor values can only be updated every 20ms
		wait1Msec(20);

	}}
